import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import ErrorButton from '@/components/error-button/ErrorButton';
import SearchBlock from '@/components/search-block/SearchBlock';
import LimitButton from '@/components/limit-input/LimitInput';
import { wrapper } from '@/store/store';
import { SpellsApi, getSpells } from '@/store/api/SpellsApi';
import SearchResult from '@/components/search-results/searchResult';
import Pagination from '@/components/pagination/Pagination';

const inter = Inter({ subsets: ['latin'] });

export default function Home(data) {
  const spellsData = data.cards.data.spells;
  const nextPage = data.cards.data.isNextPage;
  return (
    <>
      <Head>
        <title>Harry Potter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/svg+xml" href="/favicon.png" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <ErrorButton />
          <SearchBlock />
          <div className={styles.searchDetails}>
            <LimitButton />
          </div>
          <SearchResult spells={spellsData} />
          <Pagination isNextPage={nextPage} />
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = wrapper.getServerSideProps(
  (store) => async (context) => {
    const { limit, page, search } = context.query;

    const data = await store.dispatch(
      getSpells.initiate({
        limitPerPage: Array.isArray(limit) ? limit[0] : limit ? limit : '10',
        page: Array.isArray(page) ? page[0] : page ? page : '1',
        searchWord: Array.isArray(search) ? search[0] : search ? search : '',
      })
    );
    await Promise.all(store.dispatch(SpellsApi.util.getRunningQueriesThunk()));

    return {
      props: {
        cards: data,
      },
    };
  }
);

// export async function getServerSideProps() {
//   const response = await fetch(
//     'https://api.potterdb.com//v1/spells?page[size]=10&page[number]=1'
//   );
//   const data = await response.json();
//   return {
//     props: {
//       spells: data,
//     },
//   };
// }
